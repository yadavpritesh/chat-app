{"ast":null,"code":"// import React, { useState, useEffect, useMemo, useCallback } from 'react';\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import './Chat.css';\n// import { useLocation } from 'react-router-dom';\n// import InfoBar from '../InfoBar/InfoBar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n\n// const Chat = () => {\n//   const [name, setName] = useState('');\n//   const [room, setRoom] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const ENDPOINT = 'http://localhost:5000';\n\n//   const location = useLocation();\n\n//   const socket = useMemo(() => io(ENDPOINT, { transports: ['websocket','polling','flashsocket'] }), [ENDPOINT]);\n\n//   const sendMessage = useCallback((event) => {\n//     event.preventDefault();\n//     if (message.trim()) {\n//       socket.emit('message', message, () => setMessage(''));\n//     }\n//   }, [message, socket]);\n\n//   useEffect(() => {\n//     const { name, room } = queryString.parse(location.search);\n\n//     setName(name);\n//     setRoom(room);\n//     console.log(room);\n\n// socket.emit('join', { name, room }, (response) => {\n//   const { error } = response || {};\n//   if (error) {\n//     alert(error);\n//   }\n// });\n\n//     return () => {\n//       socket.disconnect();\n//       // socket.off('message');\n//     };\n//   }, [location.search,ENDPOINT,socket]);\n\n//   useEffect(() => {\n//     socket.on('message', (message) => {\n//       setMessages((prevMessages) => [...prevMessages, message]);\n//     });\n//   });\n\n//   console.log(message, messages);\n\n//   return (\n//     <div className=\"outerContainer\">\n//       <div className=\"container\">\n//         <InfoBar room={room} />\n//         <Messages messages={messages} name={name}/>\n//         <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["/home/pritesh/Desktop/chat app/chat-app/client/src/components/Chat/Chat.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import './Chat.css';\r\n// import { useLocation } from 'react-router-dom';\r\n// import InfoBar from '../InfoBar/InfoBar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n\r\n// const Chat = () => {\r\n//   const [name, setName] = useState('');\r\n//   const [room, setRoom] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n//   const [messages, setMessages] = useState([]);\r\n//   const ENDPOINT = 'http://localhost:5000';\r\n\r\n//   const location = useLocation();\r\n\r\n//   const socket = useMemo(() => io(ENDPOINT, { transports: ['websocket','polling','flashsocket'] }), [ENDPOINT]);\r\n\r\n//   const sendMessage = useCallback((event) => {\r\n//     event.preventDefault();\r\n//     if (message.trim()) {\r\n//       socket.emit('message', message, () => setMessage(''));\r\n//     }\r\n//   }, [message, socket]);\r\n\r\n//   useEffect(() => {\r\n//     const { name, room } = queryString.parse(location.search);\r\n    \r\n//     setName(name);\r\n//     setRoom(room);\r\n//     console.log(room);\r\n  \r\n// socket.emit('join', { name, room }, (response) => {\r\n//   const { error } = response || {};\r\n//   if (error) {\r\n//     alert(error);\r\n//   }\r\n// });\r\n\r\n//     return () => {\r\n//       socket.disconnect();\r\n//       // socket.off('message');\r\n//     };\r\n//   }, [location.search,ENDPOINT,socket]);\r\n\r\n//   useEffect(() => {\r\n//     socket.on('message', (message) => {\r\n//       setMessages((prevMessages) => [...prevMessages, message]);\r\n//     });\r\n//   });\r\n\r\n//   console.log(message, messages);\r\n\r\n//   return (\r\n//     <div className=\"outerContainer\">\r\n//       <div className=\"container\">\r\n//         <InfoBar room={room} />\r\n//         <Messages messages={messages} name={name}/>\r\n//         <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chat;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}