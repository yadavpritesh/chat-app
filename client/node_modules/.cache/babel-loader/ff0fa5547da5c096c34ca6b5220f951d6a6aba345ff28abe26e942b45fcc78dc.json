{"ast":null,"code":"var _jsxFileName = \"/home/pritesh/Desktop/chat app/chat-app/client/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useMemo, useCallback } from 'react';\n// import queryString from 'query-string';\n// import io from 'socket.io-client';\n// import './Chat.css';\n// import { useLocation } from 'react-router-dom';\n// import InfoBar from '../InfoBar/InfoBar';\n// import Input from '../Input/Input';\n// import Messages from '../Messages/Messages';\n\n// const Chat = () => {\n//   const [name, setName] = useState('');\n//   const [room, setRoom] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const ENDPOINT = 'http://localhost:5000';\n\n//   const location = useLocation();\n\n//   const socket = useMemo(() => io(ENDPOINT, { transports: ['websocket','polling','flashsocket'] }), [ENDPOINT]);\n\n//   const sendMessage = useCallback((event) => {\n//     event.preventDefault();\n//     if (message.trim()) {\n//       socket.emit('message', message, () => setMessage(''));\n//     }\n//   }, [message, socket]);\n\n//   useEffect(() => {\n//     const { name, room } = queryString.parse(location.search);\n\n//     setName(name);\n//     setRoom(room);\n//     console.log(room);\n\n// socket.emit('join', { name, room }, (response) => {\n//   const { error } = response || {};\n//   if (error) {\n//     alert(error);\n//   }\n// });\n\n//     return () => {\n//       socket.disconnect();\n//       // socket.off('message');\n//     };\n//   }, [location.search,ENDPOINT,socket]);\n\n//   useEffect(() => {\n//     socket.on('message', (message) => {\n//       setMessages((prevMessages) => [...prevMessages, message]);\n//     });\n//   });\n\n//   console.log(message, messages);\n\n//   return (\n//     <div className=\"outerContainer\">\n//       <div className=\"container\">\n//         <InfoBar room={room} />\n//         <Messages messages={messages} name={name}/>\n//         <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport { useLocation } from 'react-router-dom';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const location = useLocation();\n  const socketRef = useRef(null);\n  const ENDPOINT = 'http://localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    setName(name);\n    setRoom(room);\n\n    // Initialize socket connection\n    socketRef.current = io(ENDPOINT, {\n      transports: ['polling', 'flashsocket', 'websocket']\n    });\n    socketRef.current.emit('join', {\n      name,\n      room\n    }, response => {\n      const {\n        error\n      } = response || {};\n      if (error) {\n        alert(error);\n      }\n    });\n\n    // Cleanup on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect(); // Properly disconnects the socket\n        socketRef.current.off(); // Removes all event listeners\n      }\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    if (!socketRef.current) return;\n\n    // Event listener for incoming messages\n    socketRef.current.on('message', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n\n    // Cleanup listener on component unmount\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off('message');\n      }\n    };\n  }, []);\n  const sendMessage = useCallback(event => {\n    event.preventDefault();\n    if (message.trim() && socketRef.current) {\n      socketRef.current.emit('message', message, () => setMessage(''));\n    }\n  }, [message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"+VvS5dSNpcSiUtq+jpGffIGms+Q=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","queryString","io","useLocation","InfoBar","Input","Messages","jsxDEV","_jsxDEV","Chat","_s","name","setName","room","setRoom","message","setMessage","messages","setMessages","location","socketRef","ENDPOINT","parse","search","current","transports","emit","response","error","alert","disconnect","off","on","prevMessages","sendMessage","event","preventDefault","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pritesh/Desktop/chat app/chat-app/client/src/components/Chat/Chat.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\n// import queryString from 'query-string';\r\n// import io from 'socket.io-client';\r\n// import './Chat.css';\r\n// import { useLocation } from 'react-router-dom';\r\n// import InfoBar from '../InfoBar/InfoBar';\r\n// import Input from '../Input/Input';\r\n// import Messages from '../Messages/Messages';\r\n\r\n// const Chat = () => {\r\n//   const [name, setName] = useState('');\r\n//   const [room, setRoom] = useState('');\r\n//   const [message, setMessage] = useState('');\r\n//   const [messages, setMessages] = useState([]);\r\n//   const ENDPOINT = 'http://localhost:5000';\r\n\r\n//   const location = useLocation();\r\n\r\n//   const socket = useMemo(() => io(ENDPOINT, { transports: ['websocket','polling','flashsocket'] }), [ENDPOINT]);\r\n\r\n//   const sendMessage = useCallback((event) => {\r\n//     event.preventDefault();\r\n//     if (message.trim()) {\r\n//       socket.emit('message', message, () => setMessage(''));\r\n//     }\r\n//   }, [message, socket]);\r\n\r\n//   useEffect(() => {\r\n//     const { name, room } = queryString.parse(location.search);\r\n    \r\n//     setName(name);\r\n//     setRoom(room);\r\n//     console.log(room);\r\n  \r\n// socket.emit('join', { name, room }, (response) => {\r\n//   const { error } = response || {};\r\n//   if (error) {\r\n//     alert(error);\r\n//   }\r\n// });\r\n\r\n//     return () => {\r\n//       socket.disconnect();\r\n//       // socket.off('message');\r\n//     };\r\n//   }, [location.search,ENDPOINT,socket]);\r\n\r\n//   useEffect(() => {\r\n//     socket.on('message', (message) => {\r\n//       setMessages((prevMessages) => [...prevMessages, message]);\r\n//     });\r\n//   });\r\n\r\n//   console.log(message, messages);\r\n\r\n//   return (\r\n//     <div className=\"outerContainer\">\r\n//       <div className=\"container\">\r\n//         <InfoBar room={room} />\r\n//         <Messages messages={messages} name={name}/>\r\n//         <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Chat;\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\nimport './Chat.css';\r\nimport { useLocation } from 'react-router-dom';\r\nimport InfoBar from '../InfoBar/InfoBar';\r\nimport Input from '../Input/Input';\r\nimport Messages from '../Messages/Messages';\r\n\r\nconst Chat = () => {\r\n  const [name, setName] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const location = useLocation();\r\n  const socketRef = useRef(null);\r\n  const ENDPOINT = 'http://localhost:5000';\r\n\r\n  useEffect(() => {\r\n    const { name, room } = queryString.parse(location.search);\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    // Initialize socket connection\r\n    socketRef.current = io(ENDPOINT, {\r\n      transports: ['polling', 'flashsocket', 'websocket'],\r\n    });\r\n\r\n    socketRef.current.emit('join', { name, room }, (response) => {\r\n      const { error } = response || {};\r\n      if (error) {\r\n        alert(error);\r\n      }\r\n    });\r\n\r\n    // Cleanup on component unmount\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect(); // Properly disconnects the socket\r\n        socketRef.current.off(); // Removes all event listeners\r\n      }\r\n    };\r\n  }, [ENDPOINT, location.search]);\r\n\r\n  useEffect(() => {\r\n    if (!socketRef.current) return;\r\n\r\n    // Event listener for incoming messages\r\n    socketRef.current.on('message', (message) => {\r\n      setMessages((prevMessages) => [...prevMessages, message]);\r\n    });\r\n\r\n    // Cleanup listener on component unmount\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.off('message');\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = useCallback((event) => {\r\n    event.preventDefault();\r\n    if (message.trim() && socketRef.current) {\r\n      socketRef.current.emit('message', message, () => setMessage(''));\r\n    }\r\n  }, [message]);\r\n\r\n  return (\r\n    <div className=\"outerContainer\">\r\n      <div className=\"container\">\r\n        <InfoBar room={room} />\r\n        <Messages messages={messages} name={name} />\r\n        <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}